'use client';

import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable';
import supabase from '../../app/utils/supabase';
import { format } from 'date-fns';

// Helper function to add header to PDF
const addPDFHeader = async (doc, title, subtitle = '') => {
  const pageWidth = doc.internal.pageSize.width;
  
  // Add company name at top
  doc.setFontSize(16);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(0, 0, 0); // Black color
  doc.text('SS TRANSPORT CORPORATION', 20, 15);
  
  // Add logo on top right
  try {
    const logoUrl = '/logo.png';
    const img = await loadImage(logoUrl);
    doc.addImage(img, 'PNG', pageWidth - 50, 8, 40, 20);
  } catch (error) {
    console.log('Logo not loaded, skipping');
  }
  
  // Add title
  doc.setFontSize(18);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(37, 99, 235); // Blue color
  doc.text(title, pageWidth / 2, 32, { align: 'center' });
  
  // Add subtitle if provided
  if (subtitle) {
    doc.setFontSize(11);
    doc.setFont('helvetica', 'bold');
    doc.setTextColor(60, 60, 60);
    doc.text(subtitle, pageWidth / 2, 39, { align: 'center' });
  }
  
  // Add date
  doc.setFontSize(9);
  doc.setFont('helvetica', 'normal');
  doc.setTextColor(100, 100, 100);
  const currentDate = format(new Date(), 'dd MMM yyyy, hh:mm a');
  doc.text(`Generated: ${currentDate}`, pageWidth / 2, 45, { align: 'center' });
  
  // Add line
  doc.setDrawColor(100, 100, 100);
  doc.setLineWidth(0.5);
  doc.line(10, 48, pageWidth - 10, 48);
};

// Helper function to load image
const loadImage = (url) => {
  return new Promise((resolve, reject) => {
    const img = new Image();
    img.onload = () => resolve(img);
    img.onerror = reject;
    img.src = url;
  });
};

// Helper function to add footer to PDF
const addPDFFooter = (doc) => {
  const pageCount = doc.internal.getNumberOfPages();
  const pageWidth = doc.internal.pageSize.width;
  const pageHeight = doc.internal.pageSize.height;
  
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    
    // Page number on left
    doc.setFontSize(9);
    doc.setFont('helvetica', 'normal');
    doc.setTextColor(100, 100, 100);
    doc.text(
      `Page ${i} of ${pageCount}`,
      20,
      pageHeight - 10
    );
    
    // Generated by MoveSure in center - bold and darker
    doc.setFontSize(10);
    doc.setFont('helvetica', 'bold');
    doc.setTextColor(40, 40, 40);
    doc.text(
      'Generated by MoveSure',
      pageWidth / 2,
      pageHeight - 10,
      { align: 'center' }
    );
  }
};

// Generate Cities Report
export const generateCitiesReport = async (filters) => {
  try {
    // Fetch cities data
    let query = supabase
      .from('cities')
      .select('*')
      .order('city_name');

    const { data: cities, error } = await query;

    if (error) throw error;

    if (!cities || cities.length === 0) {
      alert('No cities found to generate report.');
      return;
    }

    // Create PDF
    const doc = new jsPDF('p', 'mm', 'a4');
    
    // Add header
    await addPDFHeader(doc, 'Cities List Report', `Total Cities: ${cities.length}`);

    // Prepare table data
    const tableData = cities.map((city, index) => [
      index + 1,
      city.city_code || '-',
      city.city_name || '-'
    ]);

    // Add table
    autoTable(doc, {
      startY: 52,
      head: [['#', 'City Code', 'City Name']],
      body: tableData,
      theme: 'striped',
      headStyles: {
        fillColor: [37, 99, 235],
        textColor: 255,
        fontStyle: 'bold',
        fontSize: 11
      },
      styles: {
        fontSize: 10,
        cellPadding: 5
      },
      alternateRowStyles: {
        fillColor: [245, 247, 250]
      },
      margin: { left: 20, right: 20 }
    });

    // Add footer
    addPDFFooter(doc);

    // Save PDF
    doc.save(`Cities_List_${format(new Date(), 'ddMMyyyy_HHmmss')}.pdf`);
  } catch (error) {
    console.error('Error generating cities report:', error);
    throw error;
  }
};

// Generate Transports Report (City-wise)
export const generateTransportsReport = async (filters) => {
  try {
    // Fetch all cities first
    let citiesQuery = supabase
      .from('cities')
      .select('*')
      .order('city_name');

    const { data: allCities, error: citiesError } = await citiesQuery;

    if (citiesError) throw citiesError;

    if (!allCities || allCities.length === 0) {
      alert('No cities found to generate report.');
      return;
    }

    // Fetch transports data with city information
    let query = supabase
      .from('transports')
      .select(`
        *,
        cities:city_id (
          city_name,
          city_code
        )
      `)
      .order('city_name');

    // Apply city filter if selected
    if (filters.cityId) {
      query = query.eq('city_id', filters.cityId);
    }

    const { data: transports, error } = await query;

    if (error) throw error;

    // Create PDF with landscape orientation for more columns
    const doc = new jsPDF('l', 'mm', 'a4');
    
    // Add header
    const subtitle = filters.cityId 
      ? `Filtered by City - Total Cities: ${allCities.length}` 
      : `All Cities - Total Cities: ${allCities.length}`;
    await addPDFHeader(doc, 'Transport List (City-wise)', subtitle);

    // Group transports by city_id
    const transportsByCity = (transports || []).reduce((acc, transport) => {
      const cityId = transport.city_id;
      if (!acc[cityId]) {
        acc[cityId] = [];
      }
      acc[cityId].push(transport);
      return acc;
    }, {});

    let startY = 52;
    let cityIndex = 0;

    // Generate table for each city
    allCities.forEach((city) => {
      cityIndex++;
      const cityTransports = transportsByCity[city.id] || [];
      
      // Add city header with index
      doc.setFontSize(10);
      doc.setFont('helvetica', 'bold');
      doc.setTextColor(37, 99, 235);
      const headerText = `${cityIndex}. ${city.city_name} [${city.city_code}]`;
      doc.text(headerText, 10, startY);
      
      startY += 5;

      // Prepare table data
      let tableData;
      if (cityTransports.length === 0) {
        // Show "No transport attached" message
        tableData = [['-', '-', '-', '-', '-', '-', 'No transport attached to this city']];
      } else {
        tableData = cityTransports.map((transport, index) => [
          index + 1,
          transport.transport_name || '-',
          transport.address || '-',
          transport.gst_number || '-',
          transport.mob_number || '-',
          transport.branch_owner_name || '-',
          '-'
        ]);
      }

      // Add table
      autoTable(doc, {
        startY: startY,
        head: [['#', 'Transport Name', 'Address', 'GST', 'Mobile', 'Owner', 'Remark']],
        body: tableData,
        theme: 'striped',
        headStyles: {
          fillColor: [37, 99, 235],
          textColor: 255,
          fontStyle: 'bold',
          fontSize: 8,
          halign: 'center'
        },
        styles: {
          fontSize: 8,
          cellPadding: 2.5,
          halign: 'left',
          fontStyle: 'bold'
        },
        alternateRowStyles: {
          fillColor: [245, 247, 250]
        },
        margin: { left: 10, right: 10 },
        columnStyles: {
          0: { cellWidth: 8, halign: 'center' },
          1: { cellWidth: 55 },
          2: { cellWidth: 70 },
          3: { cellWidth: 38 },
          4: { cellWidth: 25 },
          5: { cellWidth: 40 },
          6: { cellWidth: 42, halign: 'center', textColor: cityTransports.length === 0 ? [220, 38, 38] : [100, 100, 100] }
        }
      });

      // Get the final Y position after the table
      startY = doc.lastAutoTable ? doc.lastAutoTable.finalY + 6 : startY + 30;

      // Add new page if needed
      if (startY > doc.internal.pageSize.height - 40) {
        doc.addPage();
        startY = 20;
      }
    });

    // Add footer
    addPDFFooter(doc);

    // Save PDF
    doc.save(`Transports_List_${format(new Date(), 'ddMMyyyy_HHmmss')}.pdf`);
  } catch (error) {
    console.error('Error generating transports report:', error);
    throw error;
  }
};

// Generate Consignors Report
export const generateConsignorsReport = async (filters) => {
  try {
    // Fetch consignors data
    let query = supabase
      .from('consignors')
      .select('*')
      .order('consignor_name');

    const { data: consignors, error } = await query;

    if (error) throw error;

    if (!consignors || consignors.length === 0) {
      alert('No consignors found to generate report.');
      return;
    }

    // Create PDF
    const doc = new jsPDF('l', 'mm', 'a4');
    
    // Add header
    await addPDFHeader(doc, 'Consignors List Report', `Total Consignors: ${consignors.length}`);

    // Prepare table data
    const tableData = consignors.map((consignor, index) => [
      index + 1,
      consignor.consignor_name || '-',
      consignor.address || '-',
      consignor.city || '-',
      consignor.gst_number || '-',
      consignor.phone_number || '-'
    ]);

    // Add table
    autoTable(doc, {
      startY: 52,
      head: [['#', 'Consignor Name', 'Address', 'City', 'GST Number', 'Phone']],
      body: tableData,
      theme: 'striped',
      headStyles: {
        fillColor: [147, 51, 234],
        textColor: 255,
        fontStyle: 'bold',
        fontSize: 10
      },
      styles: {
        fontSize: 9,
        cellPadding: 4
      },
      alternateRowStyles: {
        fillColor: [245, 247, 250]
      },
      margin: { left: 20, right: 20 },
      columnStyles: {
        0: { cellWidth: 10 },
        1: { cellWidth: 55 },
        2: { cellWidth: 70 },
        3: { cellWidth: 40 },
        4: { cellWidth: 40 },
        5: { cellWidth: 35 }
      }
    });

    // Add footer
    addPDFFooter(doc);

    // Save PDF
    doc.save(`Consignors_List_${format(new Date(), 'ddMMyyyy_HHmmss')}.pdf`);
  } catch (error) {
    console.error('Error generating consignors report:', error);
    throw error;
  }
};

// Generate Consignees Report
export const generateConsigneesReport = async (filters) => {
  try {
    // Fetch consignees data
    let query = supabase
      .from('consignees')
      .select('*')
      .order('consignee_name');

    const { data: consignees, error } = await query;

    if (error) throw error;

    if (!consignees || consignees.length === 0) {
      alert('No consignees found to generate report.');
      return;
    }

    // Create PDF
    const doc = new jsPDF('l', 'mm', 'a4');
    
    // Add header
    await addPDFHeader(doc, 'Consignees List Report', `Total Consignees: ${consignees.length}`);

    // Prepare table data
    const tableData = consignees.map((consignee, index) => [
      index + 1,
      consignee.consignee_name || '-',
      consignee.address || '-',
      consignee.city || '-',
      consignee.gst_number || '-',
      consignee.phone_number || '-'
    ]);

    // Add table
    autoTable(doc, {
      startY: 52,
      head: [['#', 'Consignee Name', 'Address', 'City', 'GST Number', 'Phone']],
      body: tableData,
      theme: 'striped',
      headStyles: {
        fillColor: [249, 115, 22],
        textColor: 255,
        fontStyle: 'bold',
        fontSize: 10
      },
      styles: {
        fontSize: 9,
        cellPadding: 4
      },
      alternateRowStyles: {
        fillColor: [245, 247, 250]
      },
      margin: { left: 20, right: 20 },
      columnStyles: {
        0: { cellWidth: 10 },
        1: { cellWidth: 55 },
        2: { cellWidth: 70 },
        3: { cellWidth: 40 },
        4: { cellWidth: 40 },
        5: { cellWidth: 35 }
      }
    });

    // Add footer
    addPDFFooter(doc);

    // Save PDF
    doc.save(`Consignees_List_${format(new Date(), 'ddMMyyyy_HHmmss')}.pdf`);
  } catch (error) {
    console.error('Error generating consignees report:', error);
    throw error;
  }
};
